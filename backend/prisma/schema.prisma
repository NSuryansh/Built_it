generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  mobile           String             @unique
  email            String             @unique
  password         String
  alt_mobile       String
  publicKey        String
  rollNo           Int                @unique
  department       String
  receivedMessages Message[]          @relation("ReceivedMessages")
  sentMessages     Message[]          @relation("SentMessages")
  appointment      Appointments[]
  feelings         feelings?
  invite           Notifications[]    @relation("ChatInvite")
  notif            Notifications[]    @relation("User")
  pastApp          PastAppointments[]
  request          Requests[]
  resetTokens PasswordResetToken[]

  @@map("user")
}

model PasswordResetToken {
  @@map("passwordResetToken")
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Doctor {
  name     String
  mobile   String             @unique
  email    String             @unique
  password String
  reg_id   String             @unique
  desc     String?
  img      String?
  id       Int                @id @default(autoincrement())
  docApp   Appointments[]
  pastApp  PastAppointments[]
  request  Requests[]

  @@map("doctor")
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  mobile   String @unique
  password String

  @@map("admin")
}

model PastDoc {
  id        Int      @id @default(autoincrement())
  name      String
  mobile    String   @unique
  email     String   @unique
  reg_id    String   @unique
  removedAt DateTime @default(now())

  @@map("pastDoc")
}

model Message {
  id              String   @id @default(uuid())
  encryptedText   String
  iv              String
  createdAt       DateTime @default(now())
  senderId        Int
  recipientId     Int
  encryptedAESKey String
  authTag         String
  recipient       User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender          User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dateTime    DateTime
  venue       String

  @@map("events")
}

model Appointments {
  id        Int      @id @default(autoincrement())
  user_id   Int
  doctor_id Int
  dateTime  DateTime
  reason    String?
  doctor    Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model PastAppointments {
  id        Int      @id @default(autoincrement())
  note      String
  doc_id    Int?
  user_id   Int?
  createdAt DateTime
  doc       Doctor?  @relation(fields: [doc_id], references: [id])
  user      User?    @relation(fields: [user_id], references: [id])

  @@map("pastApp")
}

model Requests {
  id        Int      @id @default(autoincrement())
  user_id   Int
  doctor_id Int
  dateTime  DateTime
  reason    String?
  doctor    Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Notifications {
  id         Int      @id @default(autoincrement())
  user_id    Int
  chat_user  Int
  created_at DateTime @default(now())
  chatUser   User     @relation("ChatInvite", fields: [chat_user], references: [id])
  user       User     @relation("User", fields: [user_id], references: [id])

  @@map("notif")
}

model feelings {
  user_id           Int  @id
  mental_peace      Int
  sleep_quality     Int
  socail_life       Int
  passion           Int
  less_stress_score Int
  happiness_score   Int
  user              User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PastEvents{
  @@map("pastEvents")
  id          Int @id @default(autoincrement())
  title       String
  description String?
  dateTime    DateTime
  venue       String
}
