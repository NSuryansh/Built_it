generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE @map("Male")
  FEMALE @map("Female")
  OTHER @map("Other")
}

model User {
  id               Int                  @id @default(autoincrement())
  username         String               @unique
  mobile           String               @unique
  email            String               @unique
  password         String
  alt_mobile       String
  publicKey        String
  rollNo           Int                  @unique
  department       String
  acadProg         String
  gender           Gender
  receivedMessages Message[]            @relation("ReceivedMessages")
  sentMessages     Message[]            @relation("SentMessages")
  appointment      Appointments[]
  feelings         feelings?
  invite           Notifications[]      @relation("ChatInvite")
  notif            Notifications[]      @relation("User")
  pastApp          PastAppointments[]
  request          Requests[]
  referral         Referrals[]
  resetTokens      PasswordResetToken[]
  chatbot          Chatbot[]

  @@map("user")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@map("passwordResetToken")
}

model otpVerification {
  id        Int      @id @default(autoincrement())
  token     Int
  expiresAt DateTime
  useremail String

  @@map("otpverif")
}

model Doctor {
  name     String
  mobile   String             @unique
  email    String             @unique
  password String
  reg_id   String             @unique
  desc     String?
  img      String?
  id       Int                @id @default(autoincrement())
  address  String?
  city     String?
  experience String?
  docApp   Appointments[]
  pastApp  PastAppointments[]
  request  Requests[]
  slot     Slots[]
  referral Referrals[]
  leave    DoctorLeave[]
  emerApp  EmergencyApp[]
  education DocEducation[]
  certificaition DocCertification[]

  // bookings Booked[]
  @@map("doctor")
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  mobile   String @unique
  password String

  @@map("admin")
}

model PastDoc {
  id        Int      @id @default(autoincrement())
  name      String
  mobile    String   @unique
  email     String   @unique
  reg_id    String   @unique
  removedAt DateTime @default(now())

  @@map("pastDoc")
}

model Message {
  id              String   @id @default(uuid())
  encryptedText   String
  iv              String
  createdAt       DateTime @default(now())
  senderId        Int
  recipientId     Int
  encryptedAESKey String
  authTag         String
  senderType      String
  recipient       User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender          User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dateTime    DateTime
  venue       String

  @@map("events")
}

model Appointments {
  id        Int      @id @default(autoincrement())
  user_id   Int
  doctor_id Int
  dateTime  DateTime
  reason    String?
  doctor    Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  isDoctor   Boolean  @default(false)
  @@map("appointments")
}

model PastAppointments {
  id        Int      @id @default(autoincrement())
  note      String
  doc_id    Int?
  user_id   Int?
  createdAt DateTime
  doc       Doctor?  @relation(fields: [doc_id], references: [id])
  user      User?    @relation(fields: [user_id], references: [id])

  @@map("pastApp")
}

model Requests {
  id        Int      @id @default(autoincrement())
  user_id   Int
  doctor_id Int
  dateTime  DateTime
  reason    String?
  doctor    Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Notifications {
  id         Int      @id @default(autoincrement())
  user_id    Int
  chat_user  Int
  created_at DateTime @default(now())
  chatUser   User     @relation("ChatInvite", fields: [chat_user], references: [id])
  user       User     @relation("User", fields: [user_id], references: [id])

  @@map("notif")
}

model feelings {
  user_id           Int  @id
  mental_peace      Int
  sleep_quality     Int
  social_life       Int
  passion           Int
  less_stress_score Int
  happiness_score   Int
  user              User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PastEvents {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dateTime    DateTime
  venue       String

  @@map("pastEvents")
}

model Slots {
  id            Int      @id @default(autoincrement())
  doctor_id     Int
  doctor        Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  starting_time DateTime @db.Time()

  @@map("slots")
}

model DoctorLeave {
  id         Int      @id @default(autoincrement())
  doctor_id  Int
  doctor     Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  date_start DateTime
  date_end   DateTime

  @@map("doctor_leave")
}

model Chatbot {
  id      Int      @id @default(autoincrement())
  user_id Int
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  isBot   Boolean  @default(false)
  message String
  sentAt  DateTime @default(now())

  @@map("chatbot")
}

model Subscription {
  id        String   @id @default(uuid())
  endpoint  String   @unique
  authKey   String
  p256dhKey String
  createdAt DateTime @default(now())
}

model EmergencyApp {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  dateTime  DateTime
  reason    String
  doctor_id Int
  doctor    Doctor   @relation(fields: [doctor_id], references: [id])
}

model DocEducation {
  id        Int      @id @default(autoincrement())
  doctor_id Int
  doctor    Doctor   @relation(fields: [doctor_id], references: [id])
  education String
}

model DocCertification{
  id Int @id @default(autoincrement())
  doctor_id Int
  doctor Doctor @relation(fields: [doctor_id], references: [id])
  certification String
}

model Referrals {
  @@map("referrals")
  id      Int      @id @default(autoincrement())
  user_id Int
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  doctor_id Int
  doctor Doctor @relation(fields: [doctor_id], references: [id])
  referred_by String
  reason String

}