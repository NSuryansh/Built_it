// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  @@map("user")
  id Int @id @default(autoincrement())
  username String @unique
  mobile String @unique
  email String @unique
  password String
  alt_mobile String
  publicKey String
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  appointment Appointments[]
}

model Doctor{
  @@map("doctor")
  id Int @id @default(autoincrement()) @map("doc_id")
  name String
  mobile String @unique
  email String @unique
  password String
  reg_id String @unique
  desc String?
  img String?
  docApp Appointments[]
}

model Admin{
  @@map("admin")
  id Int @id @default(autoincrement())
  email String @unique
  mobile String @unique
}

model PastDoc{
  @@map("pastDoc")
  id Int @id @default(autoincrement())
  name String
  mobile String @unique
  email String @unique
  reg_id String @unique
  removedAt DateTime @default(now())
}

model Message {
  id          String   @id @default(uuid())
  senderId    Int
  recipientId Int
  encryptedText String
  iv          String
  encryptedAESKey String
  authTag String
  createdAt   DateTime @default(now())
  sender      User     @relation("SentMessages",fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages",fields: [recipientId], references: [id])
}

model Events {
  @@map("events")  
  id Int @id @default(autoincrement())  
  title String  
  description String?
  dateTime DateTime 
  venue String   
}

model Appointments {
  @@map("appointments")
  id Int @id @default(autoincrement())
  user_id    Int
  user   User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  doctor_id Int
  doctor Doctor @relation(fields:[doctor_id], references:[id], onDelete: Cascade)
  dateTime DateTime
  reason String?
}

model Requests {
  @@map("requests")
  id Int @id @default(autoincrement())
  user_id    Int
  user   User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  doctor_id Int
  doctor Doctor @relation(fields:[doctor_id], references:[id], onDelete: Cascade)
  dateTime DateTime
}


