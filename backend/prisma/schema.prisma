generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                  @id @default(autoincrement())
  username    String               @unique
  mobile      String               @unique
  email       String               @unique
  password    String
  alt_mobile  String
  publicKey   String
  department  String
  rollNo      String               @unique
  acadProg    String
  gender      Gender
  appointment Appointments[]
  chatbot     Chatbot[]
  feelings    feelings?
  invite      Notifications[]      @relation("ChatInvite")
  notif       Notifications[]      @relation("User")
  // resetTokens PasswordResetToken[]
  pastApp     PastAppointments[]
  referral    Referrals[]
  request     Requests[]

  @@map("user")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    Int
  // user      User     @relation(fields: [userId], references: [id])

  @@map("passwordResetToken")
}

model otpVerification {
  id        Int      @id @default(autoincrement())
  expiresAt DateTime
  useremail String
  token     Int

  @@map("otpverif")
}

model Doctor {
  name           String
  mobile         String             @unique
  email          String             @unique
  password       String
  reg_id         String             @unique
  desc           String?
  img            String?
  id             Int                @id @default(autoincrement())
  address        String?
  city           String?
  experience     String?
  avgRating      Decimal            @default(0)
  certificaition DocCertification[]
  education      DocEducation[]
  emerApp        EmergencyApp[]
  docApp         Appointments[]
  leave          DoctorLeave[]
  pastApp        PastAppointments[]
  referral       Referrals[]
  request        Requests[]
  slot           Slots[]

  @@map("doctor")
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  mobile   String @unique
  password String
  name     String

  @@map("admin")
}

model PastDoc {
  id        Int      @id @default(autoincrement())
  name      String
  mobile    String   @unique
  email     String   @unique
  reg_id    String   @unique
  removedAt DateTime @default(now())

  @@map("pastDoc")
}

model Message {
  id              String   @id @default(uuid())
  encryptedText   String
  iv              String
  createdAt       DateTime @default(now())
  senderId        Int
  recipientId     Int
  encryptedAESKey String
  authTag         String
  senderType      String
  read            Boolean @default(false)
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dateTime    DateTime
  venue       String
  url         String?

  @@map("events")
}

model Appointments {
  id        Int      @id @default(autoincrement())
  user_id   Int
  doctor_id Int
  dateTime  DateTime
  reason    String?
  isDoctor  Boolean  @default(false)
  stars     Int?
  doctor    Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model PastAppointments {
  id        Int      @id @default(autoincrement())
  note      String
  doc_id    Int?
  user_id   Int?
  createdAt DateTime
  isDoctor  Boolean  @default(false)
  stars     Int?
  doc       Doctor?  @relation(fields: [doc_id], references: [id])
  user      User?    @relation(fields: [user_id], references: [id])

  @@map("pastApp")
}

model Requests {
  id        Int      @id @default(autoincrement())
  user_id   Int
  doctor_id Int
  dateTime  DateTime
  reason    String?
  forDoctor Boolean  @default(true)
  doctor    Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Notifications {
  id         Int      @id @default(autoincrement())
  user_id    Int
  chat_user  Int
  created_at DateTime @default(now())
  chatUser   User     @relation("ChatInvite", fields: [chat_user], references: [id])
  user       User     @relation("User", fields: [user_id], references: [id])

  @@map("notif")
}

model feelings {
  user_id           Int  @id
  mental_peace      Int
  sleep_quality     Int
  passion           Int
  less_stress_score Int
  happiness_score   Int
  social_life       Int
  user              User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PastEvents {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dateTime    DateTime
  venue       String

  @@map("pastEvents")
}

model Slots {
  id            Int      @id @default(autoincrement())
  doctor_id     Int
  starting_time DateTime @db.Time(6)
  doctor        Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  @@map("slots")
}

model DoctorLeave {
  id         Int      @id @default(autoincrement())
  doctor_id  Int
  date_start DateTime
  date_end   DateTime
  doctor     Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  @@map("doctor_leave")
}

model Chatbot {
  id      Int      @id @default(autoincrement())
  user_id Int
  isBot   Boolean  @default(false)
  message String
  sentAt  DateTime @default(now())
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("chatbot")
}

model Subscription {
  id        String   @id @default(uuid())
  endpoint  String   @unique
  // authKey   String
  // p256dhKey String
  createdAt DateTime @default(now())
  doctorId  Int?
  userId    Int?
}

model EmergencyApp {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  dateTime  DateTime
  reason    String
  doctor_id Int
  doctor    Doctor   @relation(fields: [doctor_id], references: [id])
}

model DocEducation {
  id        Int    @id @default(autoincrement())
  doctor_id Int
  education String
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
}

model DocCertification {
  id            Int    @id @default(autoincrement())
  doctor_id     Int
  certification String
  doctor        Doctor @relation(fields: [doctor_id], references: [id])
}

model Referrals {
  id          Int    @id @default(autoincrement())
  user_id     Int
  doctor_id   Int
  referred_by String
  reason      String
  doctor      Doctor @relation(fields: [doctor_id], references: [id])
  user        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("referrals")
}

enum Gender {
  MALE   @map("Male")
  FEMALE @map("Female")
  OTHER  @map("Other")
}
